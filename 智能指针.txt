
				智能指针
				
	一、概念及理解：
	C++11中引入了智能指针的概念，方便管理堆内存；
	使用普通指针，容易造成堆内存泄露（忘记释放），二次释放，程序发生异常时内存泄露等问题等，使用智能指针能更好的管理堆内存。
	
	如何理解智能指针？
	从三方面入手：
	1、从较浅的层面看，智能指针是利用了一种叫做RAII（资源获取即初始化）的技术对普通的指针进行封装，这使得智能指针实质是一个对象，行为表现的却像一个指针。
	
	2、智能指针的作用是防止忘记调用delete释放内存和程序异常的进入catch块忘记释放内存。另外指针的释放时机也是非常有考究的，多次释放同一个指针会造成程序崩溃，这些都可以通过智能指针来解决。
	
	
	3、智能指针还有一个作用是把值语义转换成引用语义。
	
	【值语义(value sematics)指的是对象的拷贝与原对象无关，就像拷贝 int 一样。C++ 的内置类型(bool/int/double/char)都是值语义，标准库里的 complex<> 、pair<>、vector<>、map<>、string 等等类型也都是值语意，拷贝之后就与原对象脱离关系。】
	
	如： Animal a;

		 Animal b = a;  
		 
		 这里在C++中就产生了2个对象，若使用引用语义的话，就会只有一个对象。
//------------------------------------------------		 
	二、使用：
	
	头文件：#include <memory>
	
	常用智能指针：shared_ptr、unique_ptr、weak_ptr
	
	2.1、shared_ptr
	shared_ptr多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。每使用他一次，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。
		初始化。智能指针是个模板类，可以指定类型，传入指针通过构造函数初始化。也可以使用make_shared函数初始化。不能将指针直接赋值给一个智能指针，一个是类，一个是指针。例如std::shared_ptr<int> p4 = new int(1);的写法是错误的；
		
		拷贝和赋值。拷贝使得对象的引用计数增加1，赋值使得原对象引用计数减1，当计数为0时，自动释放内存。后来指向的对象引用计数加1，指向后来的对象；
		
		get函数获取原始指针；
		
		注意不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存；
		注意避免循环引用，shared_ptr的一个最大的陷阱是循环引用，循环，循环引用会导致堆内存无法正确释放，导致内存泄漏。
	
	//--------------------代码：
	#include <iostream>
	#include <memory>
	using namespace std;
	
	int main() 
	{
		{	int a = 10;
			shared_ptr<int> ptra = make_shared<int>(a);
			cout << "ptra引用计数：" << ptra.use_count() << endl;
			shared_ptr<int> ptra2(ptra); //copy，引用加1
			cout <<"ptra引用计数：" << ptra.use_count() << endl;
			cout << "ptra2引用计数：" << ptra2.use_count() << endl;
			cout << "ptra的原始指针：" << ptra.get() << " ptra2的原始指针： " << ptra2.get()<< endl;
	
			int b = 20;
			int *pb = &a;
			//shared_ptr<int> ptrb = pb;  //错误
			shared_ptr<int> ptrb = make_shared<int>(b);
			ptra2 = ptrb; //assign,原对象的引用计数减1，ptra2的计数减1
			pb = ptrb.get(); //获取原始指针
			
			cout << "ptra2原始指针：" << ptra2.get() << " ptrb原始指针："<< pb << endl;
			cout << "ptra引用计数：" << ptra.use_count() << endl;
			cout << "ptrb引用计数：" << ptrb.use_count() << endl;
		}	//注意调试，看看在离开这个大括号的时候，是不是所有指针都释放了	
			return 0;
		
	}
	
	//-------------------------------//
	
	2.2、unique_ptr
	unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。
	相比与原始指针unique_ptr用于其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。unique_ptr指针本身的生命周期：从unique_ptr指针创建时开始，直到离开作用域。离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。
	unique_ptr指针与其所指对象的关系：在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。
	
	//------------代码：在上面代码的基础上，加上以下代码，调试看看清空
	{unique_ptr<int> uptr(new int(10));  //绑定动态对象
											//unique_ptr<int> uptr2 = uptr;  //不能賦值
											//unique_ptr<int> uptr2(uptr);  //不能拷貝
	unique_ptr<int> uptr2 = move(uptr); //转换所有权
	uptr2.release(); //释放所有权
	}
	
	//---------------------------//
	2.3、weak_ptr
	
	weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它不具有普通指针的行为，没有重载operator*和->,它的最大作用在于协助shared_ptr工作，像旁观者那样观测资源的使用情况。
	
	weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。
	但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。
	使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。
	
	weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象， 从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。
	
	
	//---------------------//代码：在上面代码的基础上，接着往后添加代码
	{
		shared_ptr<int> sh_ptr = make_shared<int>(10);
		cout << sh_ptr.use_count() << endl;

		weak_ptr<int> wp(sh_ptr);
		cout << wp.use_count() << endl;

		if (!wp.expired()) {
			shared_ptr<int> sh_ptr2 = wp.lock(); //get another shared_ptr
			*sh_ptr = 100;
			cout << wp.use_count() << endl;
		}
	}//注意调试，看内存释放清空
	
	//////////////////////////////////////////////////////////
	2.4、设计智能指针
	
	智能指针类将一个计数器与类指向的对象相关联，引用计数跟踪该类有多少个对象共享同一指针。每次创建类的新对象时，初始化指针并将引用计数置为1；当对象作为另一对象的副本而创建时，拷贝构造函数拷贝指针并增加与之相应的引用计数；对一个对象进行赋值时，赋值操作符减少左操作数所指对象的引用计数（如果引用计数为减至0，则删除对象），并增加右操作数所指对象的引用计数；调用析构函数时，构造函数减少引用计数（如果引用计数减至0，则删除基础对象）。智能指针就是模拟指针动作的类。所有的智能指针都会重载 -> 和 * 操作符。智能指针还有许多其他功能，比较有用的是自动销毁。这主要是利用栈对象的有限作用域以及临时对象（有限作用域实现）析构函数释放内存。
	
	//----------------代码：用到了重载运算符
	
	#include <iostream>
	#include <memory>
	using namespace std;
	
	template<typename T>
	class SmartPointer {
	private:
		T* _ptr;
		size_t* _count;
	public:
		SmartPointer(T* ptr = nullptr) :
			_ptr(ptr) {
			if (_ptr) {
				_count = new size_t(1);
			}
			else {
				_count = new size_t(0);
			}
		}
	
		SmartPointer(const SmartPointer& ptr) {
			if (this != &ptr) {
				this->_ptr = ptr._ptr;
				this->_count = ptr._count;
				(*this->_count)++;
			}
		}
	
		SmartPointer& operator=(const SmartPointer& ptr) {
			if (this->_ptr == ptr._ptr) {          
				return *this;
			}
	
			if (this->_ptr) {
				(*this->_count)--;
				if (*this->_count == 0) {
					delete this->_ptr;
					delete this->_count;
				}
			}
	
			this->_ptr = ptr._ptr;
			this->_count = ptr._count;
			(*this->_count)++;
			return *this;
		}
	

		T& operator*() {
			assert(this->_ptr == nullptr);
			return *(this->_ptr);
	
		}

		//将类对象作为参数传入的时候，可以调用->,如 SmartPointer(A()),就可以通过->指出A类里面的成员函数
	
		T* operator->() {
			assert(this->_ptr == nullptr);
			return this->_ptr;
		}
	
		~SmartPointer() {
			(*this->_count)--;
			if (*this->_count == 0) {
				delete this->_ptr;
				delete this->_count;
			}
		}
	
		size_t use_count() {
			return *this->_count;
		}
	};
	
	int main() {
		{
			SmartPointer<int> sp(new int(10));
			SmartPointer<int> sp2(sp);
			SmartPointer<int> sp3(new int(20));
			sp2 = sp3;
			cout << sp.use_count() << endl;
			cout << sp3.use_count() << endl;
		}
		//调试看是否删除对应信息了
		return 0;
	}
	